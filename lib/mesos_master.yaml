heat_template_version: 2013-05-23

description: Template that installs mesos master server(s).

parameters:
  name:
    type: string
    label: Compute instance name

  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use an Ubuntu based image.
    default: bbd62832-062e-445a-b7da-6c67d02b35a8
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  key_name:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: my_key
    constraints:
      - custom_constraint: nova.keypair

  port:
    type: string
    description: Port of master node

  node_index:
    type: string
    label: MasterNodeId
    description: Zookeper id /etc/zookeeper/conf/myid. Each master in cluster should have different one.

  cluster_size:
    type: string
    label: ClusterSize
    description: Total number of Master nodes.

  private_ip_master_1:
    type: string
    description: private ip of master 1 node

  private_ip_master_2:
    type: string
    description: private ip of master 2 node

  private_ip_master_3:
    type: string
    description: private ip of master 3 node




resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 900

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_param: port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __private_ip_master_1__: { get_param: private_ip_master_1 }
            __private_ip_master_2__: { get_param: private_ip_master_2 }
            __private_ip_master_3__: { get_param: private_ip_master_3 }
            __node_index__: { get_param: node_index }
            __cluster_size__: {get_param: cluster_size }
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/sh
            sudo su

            cat <<'EOF' > /root/install.sh
            #!/bin/sh
            NODE_1_IP=__private_ip_master_1__
            NODE_2_IP=__private_ip_master_2__
            NODE_3_IP=__private_ip_master_3__
            CLUSTER_SIZE=__cluster_size__
            NODE_INDEX=__node_index__

            echo "private_ip_master_1 $NODE_1_IP"
            echo "private_ip_master_2 $NODE_2_IP"
            echo "private_ip_master_3 $NODE_3_IP"
            echo "cluster_size $CLUSTER_SIZE"
            echo "node_index $NODE_INDEX"

            #sudo su
            # End on any nonzero exit code
            set -e
            IP=$(/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')
            echo "$IP $(hostname)" >> /etc/hosts
            echo "export http_proxy=http://ogun.ics.muni.cz:3128/" >> /etc/environment
            echo "export https_proxy=http://ogun.ics.muni.cz:3128/" >> /etc/environment
            export http_proxy=http://ogun.ics.muni.cz:3128/
            export https_proxy=http://ogun.ics.muni.cz:3128/
            apt-get install htop vim -y


            # Mesos master install
            # Setup
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF
            DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
            CODENAME=$(lsb_release -cs)
            # Add the repository
            echo "deb http://repos.mesosphere.com/${DISTRO} ${CODENAME} main" > /etc/apt/sources.list.d/mesosphere.list
            # Install Java 8 from Oracle's PPA
            add-apt-repository ppa:webupd8team/java -y
            apt-get clean
            apt-get update -y
            apt-get upgrade -y
            echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
            echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections
            apt-get install -y oracle-java8-installer oracle-java8-set-default

            apt-get -y install mesosphere

            # Configure Zookeper
            #NODE_INDEX=$((__node_index__+1))
            echo  $NODE_INDEX > /etc/zookeeper/conf/myid
            echo "server.1=$NODE_1_IP:2888:3888" >> /etc/zookeeper/conf/zoo.cfg
            echo "server.2=$NODE_2_IP:2888:3888" >> /etc/zookeeper/conf/zoo.cfg
            echo "server.3=$NODE_3_IP:2888:3888" >> /etc/zookeeper/conf/zoo.cfg

            # Config mesos and marathon
            echo "zk://$NODE_1_IP:2181,$NODE_2_IP:2181,$NODE_3_IP:2181/mesos" > /etc/mesos/zk
            QUORUM=$CLUSTER_SIZE
            if [ "$QUORUM" -ne "1" ]; then
            QUORUM=$(((QUORUM/2)+1))
            fi
            echo $QUORUM > /etc/mesos-master/quorum
            echo "$IP" > /etc/mesos-master/ip
            cp /etc/mesos-master/ip /etc/mesos-master/hostname
            mkdir -p /etc/marathon/conf
            cp /etc/mesos-master/hostname /etc/marathon/conf
            cp /etc/mesos/zk /etc/marathon/conf/master
            cp /etc/marathon/conf/master /etc/marathon/conf/zk
            sed -i 's/mesos/marathon/g' /etc/marathon/conf/zk


            # Disable mesos slave
            # echo prevents nonzero return code
            stop mesos-slave | echo
            echo "manual" > /etc/init/mesos-slave.override

            # Restart services
            stop zookeeper | echo
            start zookeeper | echo
            stop mesos-master | echo
            start mesos-master  | echo
            stop marathon | echo
            start marathon | echo


            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "SCRIPT FINISHED SUCESFULLY"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

            EOF
            chmod 700 /root/install.sh
            # run mesos instal script
            . /root/install.sh >> /root/install_mesos.log
            #echo $? > /root/output
            #wc_notify --data-binary '{"status": "SUCCESS"}'
            if [ "$?" = "0" ]; then
              wc_notify --data-binary '{"status": "SUCCESS"}'
            else
              wc_notify --data-binary '{"status": "FAILURE", "reason": "Instal script completed with errors, more can be found in /root/install_mesos.log"}'
            fi

outputs:
  name:
    description: Name of the tiny instance.
    value: { get_attr: [server, name] }
  ip:
    description: The IP address of the tiny instance.
    value: { get_attr: [server, first_address] }
  port:
    description: The network port of the Flasky instance.
    value: { get_param: port }
  floating_ip:
    description: The network port of the Flasky instance.
    value: { get_param: floating_ip }
